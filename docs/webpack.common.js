const { resolve } = require('path');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { VueLoaderPlugin } = require('vue-loader')

const staticPath = resolve(__dirname, 'source', '_static');
const htmlPath = resolve(__dirname, 'source', '_templates');


// generates cache-busting templates to be used in `layout.html` without knowing versions
function macroTemplate({ compilation }) {
  const indexes = Object.keys(compilation.assets);

  const css = indexes.filter((file) => file.endsWith('.css'));
  const js = indexes.filter((file) => file.endsWith('.js'));

  const stylesheet = (css) => {
    return `\
<link href="{{ pathto('_static/css/theme.css', 1) }}" rel="stylesheet">
  <link href="{{ pathto('_static/${css}', 1) }}" rel="stylesheet">`;
  };

  const preload = (js) => {
    return `<link rel="preload" as="script" href="{{ pathto('_static/${js}', 1) }}">`;
  };

  const script = (js) => {
    return `<script src="{{ pathto('_static/${js}', 1) }}"></script>`;
  };

  return `<!-- these macros are generated by "yarn build:production". do not edit by hand. -->
{% macro head_js_preload() %}
  ${js.map(preload).join('\n')}
{% endmacro %}
{% macro body_post() %}
  ${js.map(script).join('\n')}
{% endmacro %}`;
}


module.exports = {
  entry: {
    index: ['./frontend/js/index.js'],
  },
  output: {
    filename: 'js/[name].[contenthash].js',
    path: staticPath,
    clean: true,
  },
  plugins: [
    new CleanWebpackPlugin({
      cleanOnceBeforeBuildPatterns: ['**/*', '!css', '!css/theme.css'],
    }),
    new HtmlWebpackPlugin({
      filename: resolve(htmlPath, 'webpack-macros.html'),
      inject: false,
      minify: false,
      css: true,
      templateContent: macroTemplate,
    }),
    new VueLoaderPlugin()
  ],
  module: {
    rules: [
      {
        test: /\.(sa|sc|c)ss$/,
        use: [
          'vue-style-loader',
          'css-loader',
          'sass-loader',
        ],
      },
      {
        test: /\.vue$/,
        loader: 'vue-loader'
      }
    ]
  },
  optimization: {
    splitChunks: {
      chunks: 'all',
      name: 'vendor'
    }
  }
}
