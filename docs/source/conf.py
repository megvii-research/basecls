# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
from datetime import datetime

sys.path.insert(0, os.path.abspath("../../"))
import basecls  # noqa: E402

# -- Project information -----------------------------------------------------

project = "BaseCls"
author = "basedet team, Megvii"
copyright = f"2021-{datetime.now().year}, {author}"

# The full version, including alpha/beta/rc tags
release = basecls.__version__


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom
# ones.
extensions = [
    "myst_parser",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.extlinks",
    "sphinx.ext.intersphinx",
    "sphinx.ext.mathjax",
    "sphinx.ext.napoleon",
    "sphinx.ext.viewcode",
    "sphinx_autodoc_typehints",
    "sphinxcontrib.datatemplates",
    "sphinxcontrib.email",
]

source_suffix = {
    ".rst": "restructuredtext",
    ".md": "markdown",
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en_US"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# -- Options for Extensions -------------------------------------------------

# Setting for sphinx.ext.autosummary to auto-generate single html pages
# Please makesure all api pages are stored in `/reference/api/` directory
autosummary_generate = False

# Setting for sphinx.ext.autodoc
autodoc_default_options = {"member-order": "bysource"}
autoclass_content = "class"
autodoc_docstring_signature = True
autodoc_preserve_defaults = True

# Setting for sphinx.ext.intersphinx
# Useful for refenrece other projects, eg. :py:class:`zipfile.ZipFile`
intersphinx_mapping = {
    "megengine": ("https://megengine.org.cn/doc/stable/zh/", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "pillow": ("https://pillow.readthedocs.io/en/stable/", None),
    "python": ("https://docs.python.org/3/", None),
}

# Setting for sphinx.ext.extlinks
# Can use the alias name as a new role, e.g. :issue:`123`
extlinks = {
    "issue": ("https://github.com/megvii-research/basecls/issues/%s", "Issue #"),
    "pr": ("https://github.com/megvii-research/basecls/pull/%s", "Pull Request !"),
}

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "pydata_sphinx_theme"
html_theme_options = {
    "icon_links": [
        {
            "name": "GitHub",
            "url": "https://github.com/megvii-research/basecls",
            "icon": "fab fa-github",
        }
    ],
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

master_doc = "index"


def run_apidoc(_):
    from sphinx.ext.apidoc import main

    src_dir = os.path.dirname(os.path.abspath(__file__))
    main(
        [
            "-f",
            "-e",
            "-T",
            "-M",
            "-o",
            os.path.join(src_dir, "api"),
            os.path.abspath(os.path.join(src_dir, "../../basecls")),
            "-t",
            os.path.join(src_dir, "_templates", "apidoc"),
        ]
    )


def gen_models(_):
    cwd = os.path.abspath(os.getcwd())
    os.chdir(os.path.abspath(os.path.join(os.path.abspath(__file__), "../..")))
    os.system("./sync_zoo.sh ../zoo source/zoo")
    os.system("python3 generate_models.py")
    os.chdir(cwd)


def setup(app):
    app.connect("builder-inited", run_apidoc)
    app.connect("builder-inited", gen_models)
